#!/bin/bash

# Основные метаданные пакета
PKG_NAME="libzstd"
PKG_VERSION="1.5.6"
PKG_SRC_URL="https://github.com/facebook/zstd/releases/download/v$PKG_VERSION/zstd-$PKG_VERSION.tar.gz"
PKG_ARCHITECTURE="amd64"
PKG_LICENSE="BSD-3-Clause"
PKG_DEPENDENCIES="gcc:14.2.0 make:4.4.1 zlib:1.3.1"
PKG_FETCH_METHOD="wget"
PKG_INSTALL_DIR="/usr"
PKG_BUILD_DIR="zstd-$PKG_VERSION"

# Проверка версии утилиты
check_version() {
    local cmd=$1
    local min_version=$2
    local version

    if ! command -v "$cmd" &>/dev/null; then
        echo "ERROR: $cmd is not installed"
        return 1
    fi

    version=$($cmd --version | head -n1 | grep -oP '\d+\.\d+\.\d+')
    if [ -z "$version" ]; then
        echo "ERROR: Could not determine version of $cmd"
        return 1
    fi

    if [ "$(printf '%s\n' "$version" "$min_version" | sort -V | head -n1)" != "$min_version" ]; then
        echo "ERROR: $cmd version $version is less than required $min_version"
        return 1
    fi
    echo "Found $cmd version $version"
    return 0
}

# Разрешение зависимостей
resolve_dependencies() {
    echo "Resolving dependencies..."
    local dep_name dep_version
    for dep in $PKG_DEPENDENCIES; do
        dep_name=$(echo "$dep" | cut -d: -f1)
        dep_version=$(echo "$dep" | cut -d: -f2)

        case "$dep_name" in
            gcc)
                check_version "gcc" "$dep_version" || return 1
                ;;
            make)
                check_version "make" "$dep_version" || return 1
                ;;
            zlib)
                if ! pkg-config --atleast-version="$dep_version" "$dep_name"; then
                    echo "ERROR: $dep_name version >= $dep_version is not installed"
                    return 1
                fi
                echo "Found $dep_name version $(pkg-config --modversion "$dep_name")"
                ;;
            *)
                echo "WARNING: Unknown dependency $dep_name, skipping version check"
                ;;
        esac
    done
    echo "All dependencies satisfied."
    return 0
}

# Фаза распаковки
unpack_stage() {
    echo "Unpacking sources to /tmp/$PKG_BUILD_DIR..."
    mkdir -p "/tmp/$PKG_BUILD_DIR" || {
        echo "ERROR: Failed to create directory /tmp/$PKG_BUILD_DIR"
        return 1
    }
    cd "/tmp/$PKG_BUILD_DIR" || {
        echo "ERROR: Failed to change directory to /tmp/$PKG_BUILD_DIR"
        return 1
    }
    echo "Downloading from $PKG_SRC_URL..."
    if ! wget -q --no-check-certificate "$PKG_SRC_URL" -O "$PKG_NAME-$PKG_VERSION.tar.gz"; then
        echo "ERROR downloading sources for $PKG_NAME: Failed to download from $PKG_SRC_URL"
        return 1
    }
    echo "Extracting $PKG_NAME-$PKG_VERSION.tar.gz..."
    if ! tar -xzf "$PKG_NAME-$PKG_VERSION.tar.gz" --strip-components=1; then
        echo "ERROR: Failed to extract $PKG_NAME-$PKG_VERSION.tar.gz"
        return 1
    }
    rm -f "$PKG_NAME-$PKG_VERSION.tar.gz"
    echo "Unpacking completed."
    return 0
}

# Фаза компиляции
compile_stage() {
    echo "Compiling package in /tmp/$PKG_BUILD_DIR..."
    cd "/tmp/$PKG_BUILD_DIR" || {
        echo "ERROR: Failed to change directory to /tmp/$PKG_BUILD_DIR"
        return 1
    }
    # libzstd uses the 'build/meson' or 'Makefile' in the root directory
    # We'll use the Makefile in the 'lib' directory for a standard library build
    cd lib || {
        echo "ERROR: Failed to change directory to lib"
        return 1
    }
    make -j$(nproc) PREFIX="$PKG_INSTALL_DIR" 2>&1 | tee build.log || {
        echo "ERROR: Make failed for $PKG_NAME. Check /tmp/$PKG_BUILD_DIR/lib/build.log for details."
        return 1
    }
    echo "Compilation completed."
    return 0
}

# Фаза установки
install_stage() {
    echo "Installing package to $PKG_INSTALL_DIR..."
    cd "/tmp/$PKG_BUILD_DIR/lib" || {
        echo "ERROR: Failed to change directory to /tmp/$PKG_BUILD_DIR/lib"
        return 1
    }
    make install PREFIX="$PKG_INSTALL_DIR" || {
        echo "ERROR: Installation failed for $PKG_NAME"
        return 1
    }
    # Ensure pkg-config files are installed correctly
    if [ -d "$PKG_INSTALL_DIR/lib/pkgconfig" ]; then
        echo "Found pkg-config files in $PKG_INSTALL_DIR/lib/pkgconfig"
    else
        echo "WARNING: pkg-config files not found in $PKG_INSTALL_DIR/lib/pkgconfig"
    fi
    echo "Installation completed."
    return 0
}

# Общая стадия
default() {
    echo "Building and installing package $PKG_NAME version $PKG_VERSION..."
    resolve_dependencies || return 1
    unpack_stage || return 1
    compile_stage || return 1
    install_stage || return 1
    return 0
}

# Эмулятор команд
emake() {
    case "$1" in
        "unpack")
            unpack_stage
            ;;
        "compile")
            compile_stage
            ;;
        "install")
            install_stage
            ;;
        *)
            echo "Unknown command: $1"
            return 1
            ;;
    esac
}

# Обработка ошибок
handle_error() {
    echo "Error: Build or installation process failed."
    return 1
}

# Главная функция
main() {
    trap 'handle_error' ERR
    emake "$1"
}

# Запуск
main "$@"
